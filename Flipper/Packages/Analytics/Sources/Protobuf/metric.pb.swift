// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: metric.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Metric_MetricReportRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sessionUuid: String = String()

  var version: String = String()

  /// User uuid
  var uuid: String = String()

  var platform: Metric_MetricReportRequest.Platform = .android

  var events: [Metric_MetricEventsCollection] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Platform: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case android // = 0
    case androidDebug // = 1
    case ios // = 2
    case iosDebug // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .android
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .android
      case 1: self = .androidDebug
      case 2: self = .ios
      case 3: self = .iosDebug
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .android: return 0
      case .androidDebug: return 1
      case .ios: return 2
      case .iosDebug: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Metric_MetricReportRequest.Platform: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Metric_MetricReportRequest.Platform] = [
    .android,
    .androidDebug,
    .ios,
    .iosDebug,
  ]
}

#endif  // swift(>=4.2)

struct Metric_MetricEventsCollection {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var event: Metric_MetricEventsCollection.OneOf_Event? = nil

  var `open`: Metric_Events_Open {
    get {
      if case .open(let v)? = event {return v}
      return Metric_Events_Open()
    }
    set {event = .open(newValue)}
  }

  var flipperGattInfo: Metric_Events_FlipperGattInfo {
    get {
      if case .flipperGattInfo(let v)? = event {return v}
      return Metric_Events_FlipperGattInfo()
    }
    set {event = .flipperGattInfo(newValue)}
  }

  var flipperRpcInfo: Metric_Events_FlipperRpcInfo {
    get {
      if case .flipperRpcInfo(let v)? = event {return v}
      return Metric_Events_FlipperRpcInfo()
    }
    set {event = .flipperRpcInfo(newValue)}
  }

  var updateFlipperStart: Metric_Events_UpdateFlipperStart {
    get {
      if case .updateFlipperStart(let v)? = event {return v}
      return Metric_Events_UpdateFlipperStart()
    }
    set {event = .updateFlipperStart(newValue)}
  }

  var updateFlipperEnd: Metric_Events_UpdateFlipperEnd {
    get {
      if case .updateFlipperEnd(let v)? = event {return v}
      return Metric_Events_UpdateFlipperEnd()
    }
    set {event = .updateFlipperEnd(newValue)}
  }

  var synchronizationEnd: Metric_Events_SynchronizationEnd {
    get {
      if case .synchronizationEnd(let v)? = event {return v}
      return Metric_Events_SynchronizationEnd()
    }
    set {event = .synchronizationEnd(newValue)}
  }

  var subghzProvisioning: Metric_Events_SubGhzProvisioning {
    get {
      if case .subghzProvisioning(let v)? = event {return v}
      return Metric_Events_SubGhzProvisioning()
    }
    set {event = .subghzProvisioning(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Event: Equatable {
    case `open`(Metric_Events_Open)
    case flipperGattInfo(Metric_Events_FlipperGattInfo)
    case flipperRpcInfo(Metric_Events_FlipperRpcInfo)
    case updateFlipperStart(Metric_Events_UpdateFlipperStart)
    case updateFlipperEnd(Metric_Events_UpdateFlipperEnd)
    case synchronizationEnd(Metric_Events_SynchronizationEnd)
    case subghzProvisioning(Metric_Events_SubGhzProvisioning)

  #if !swift(>=4.1)
    static func ==(lhs: Metric_MetricEventsCollection.OneOf_Event, rhs: Metric_MetricEventsCollection.OneOf_Event) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.open, .open): return {
        guard case .open(let l) = lhs, case .open(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.flipperGattInfo, .flipperGattInfo): return {
        guard case .flipperGattInfo(let l) = lhs, case .flipperGattInfo(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.flipperRpcInfo, .flipperRpcInfo): return {
        guard case .flipperRpcInfo(let l) = lhs, case .flipperRpcInfo(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.updateFlipperStart, .updateFlipperStart): return {
        guard case .updateFlipperStart(let l) = lhs, case .updateFlipperStart(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.updateFlipperEnd, .updateFlipperEnd): return {
        guard case .updateFlipperEnd(let l) = lhs, case .updateFlipperEnd(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.synchronizationEnd, .synchronizationEnd): return {
        guard case .synchronizationEnd(let l) = lhs, case .synchronizationEnd(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.subghzProvisioning, .subghzProvisioning): return {
        guard case .subghzProvisioning(let l) = lhs, case .subghzProvisioning(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Metric_MetricReportRequest: @unchecked Sendable {}
extension Metric_MetricReportRequest.Platform: @unchecked Sendable {}
extension Metric_MetricEventsCollection: @unchecked Sendable {}
extension Metric_MetricEventsCollection.OneOf_Event: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "metric"

extension Metric_MetricReportRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MetricReportRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    4: .standard(proto: "session_uuid"),
    5: .same(proto: "version"),
    2: .same(proto: "uuid"),
    3: .same(proto: "platform"),
    1: .same(proto: "events"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.events) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.uuid) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.platform) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.sessionUuid) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.version) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.events.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.events, fieldNumber: 1)
    }
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 2)
    }
    if self.platform != .android {
      try visitor.visitSingularEnumField(value: self.platform, fieldNumber: 3)
    }
    if !self.sessionUuid.isEmpty {
      try visitor.visitSingularStringField(value: self.sessionUuid, fieldNumber: 4)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Metric_MetricReportRequest, rhs: Metric_MetricReportRequest) -> Bool {
    if lhs.sessionUuid != rhs.sessionUuid {return false}
    if lhs.version != rhs.version {return false}
    if lhs.uuid != rhs.uuid {return false}
    if lhs.platform != rhs.platform {return false}
    if lhs.events != rhs.events {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metric_MetricReportRequest.Platform: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ANDROID"),
    1: .same(proto: "ANDROID_DEBUG"),
    2: .same(proto: "IOS"),
    3: .same(proto: "IOS_DEBUG"),
  ]
}

extension Metric_MetricEventsCollection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MetricEventsCollection"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "open"),
    2: .standard(proto: "flipper_gatt_info"),
    3: .standard(proto: "flipper_rpc_info"),
    4: .standard(proto: "update_flipper_start"),
    5: .standard(proto: "update_flipper_end"),
    12: .standard(proto: "synchronization_end"),
    13: .standard(proto: "subghz_provisioning"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Metric_Events_Open?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .open(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .open(v)
        }
      }()
      case 2: try {
        var v: Metric_Events_FlipperGattInfo?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .flipperGattInfo(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .flipperGattInfo(v)
        }
      }()
      case 3: try {
        var v: Metric_Events_FlipperRpcInfo?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .flipperRpcInfo(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .flipperRpcInfo(v)
        }
      }()
      case 4: try {
        var v: Metric_Events_UpdateFlipperStart?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .updateFlipperStart(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .updateFlipperStart(v)
        }
      }()
      case 5: try {
        var v: Metric_Events_UpdateFlipperEnd?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .updateFlipperEnd(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .updateFlipperEnd(v)
        }
      }()
      case 12: try {
        var v: Metric_Events_SynchronizationEnd?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .synchronizationEnd(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .synchronizationEnd(v)
        }
      }()
      case 13: try {
        var v: Metric_Events_SubGhzProvisioning?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .subghzProvisioning(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .subghzProvisioning(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.event {
    case .open?: try {
      guard case .open(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .flipperGattInfo?: try {
      guard case .flipperGattInfo(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .flipperRpcInfo?: try {
      guard case .flipperRpcInfo(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .updateFlipperStart?: try {
      guard case .updateFlipperStart(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .updateFlipperEnd?: try {
      guard case .updateFlipperEnd(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .synchronizationEnd?: try {
      guard case .synchronizationEnd(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case .subghzProvisioning?: try {
      guard case .subghzProvisioning(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Metric_MetricEventsCollection, rhs: Metric_MetricEventsCollection) -> Bool {
    if lhs.event != rhs.event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
