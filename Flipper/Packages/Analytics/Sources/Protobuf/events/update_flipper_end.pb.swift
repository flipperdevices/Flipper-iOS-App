// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: events/update_flipper_end.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Metric_Events_UpdateFlipperEnd {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var updateFrom: String = String()

  var updateTo: String = String()

  var updateID: Int64 = 0

  var updateStatus: Metric_Events_UpdateFlipperEnd.UpdateStatus = .completed

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum UpdateStatus: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case completed // = 0
    case canceled // = 1
    case failedDownload // = 2
    case failedPrepare // = 3
    case failedUpload // = 4
    case failed // = 5
    case UNRECOGNIZED(Int)

    init() {
      self = .completed
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .completed
      case 1: self = .canceled
      case 2: self = .failedDownload
      case 3: self = .failedPrepare
      case 4: self = .failedUpload
      case 5: self = .failed
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .completed: return 0
      case .canceled: return 1
      case .failedDownload: return 2
      case .failedPrepare: return 3
      case .failedUpload: return 4
      case .failed: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Metric_Events_UpdateFlipperEnd.UpdateStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Metric_Events_UpdateFlipperEnd.UpdateStatus] = [
    .completed,
    .canceled,
    .failedDownload,
    .failedPrepare,
    .failedUpload,
    .failed,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Metric_Events_UpdateFlipperEnd: @unchecked Sendable {}
extension Metric_Events_UpdateFlipperEnd.UpdateStatus: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "metric.events"

extension Metric_Events_UpdateFlipperEnd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateFlipperEnd"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "update_from"),
    2: .standard(proto: "update_to"),
    3: .standard(proto: "update_id"),
    4: .standard(proto: "update_status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.updateFrom) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.updateTo) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.updateID) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.updateStatus) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.updateFrom.isEmpty {
      try visitor.visitSingularStringField(value: self.updateFrom, fieldNumber: 1)
    }
    if !self.updateTo.isEmpty {
      try visitor.visitSingularStringField(value: self.updateTo, fieldNumber: 2)
    }
    if self.updateID != 0 {
      try visitor.visitSingularInt64Field(value: self.updateID, fieldNumber: 3)
    }
    if self.updateStatus != .completed {
      try visitor.visitSingularEnumField(value: self.updateStatus, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Metric_Events_UpdateFlipperEnd, rhs: Metric_Events_UpdateFlipperEnd) -> Bool {
    if lhs.updateFrom != rhs.updateFrom {return false}
    if lhs.updateTo != rhs.updateTo {return false}
    if lhs.updateID != rhs.updateID {return false}
    if lhs.updateStatus != rhs.updateStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metric_Events_UpdateFlipperEnd.UpdateStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "COMPLETED"),
    1: .same(proto: "CANCELED"),
    2: .same(proto: "FAILED_DOWNLOAD"),
    3: .same(proto: "FAILED_PREPARE"),
    4: .same(proto: "FAILED_UPLOAD"),
    5: .same(proto: "FAILED"),
  ]
}
