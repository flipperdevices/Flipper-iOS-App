// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: events/sub_ghz_provisioning.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Metric_Events_SubGhzProvisioning {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var regionNetwork: String = String()

  var regionSim1: String = String()

  var regionSim2: String = String()

  var regionIp: String = String()

  var regionSystem: String = String()

  var regionProvided: String = String()

  var isRoaming: Bool = false

  var regionSource: Metric_Events_SubGhzProvisioning.RegionSource = .simNetwork

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum RegionSource: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case simNetwork // = 0
    case simCountry // = 1
    case geoIp // = 2
    case system // = 3
    case `default` // = 4
    case UNRECOGNIZED(Int)

    init() {
      self = .simNetwork
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .simNetwork
      case 1: self = .simCountry
      case 2: self = .geoIp
      case 3: self = .system
      case 4: self = .default
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .simNetwork: return 0
      case .simCountry: return 1
      case .geoIp: return 2
      case .system: return 3
      case .default: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Metric_Events_SubGhzProvisioning.RegionSource: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Metric_Events_SubGhzProvisioning.RegionSource] = [
    .simNetwork,
    .simCountry,
    .geoIp,
    .system,
    .default,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Metric_Events_SubGhzProvisioning: @unchecked Sendable {}
extension Metric_Events_SubGhzProvisioning.RegionSource: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "metric.events"

extension Metric_Events_SubGhzProvisioning: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubGhzProvisioning"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "region_network"),
    2: .standard(proto: "region_sim_1"),
    3: .standard(proto: "region_sim_2"),
    4: .standard(proto: "region_ip"),
    5: .standard(proto: "region_system"),
    6: .standard(proto: "region_provided"),
    7: .standard(proto: "is_roaming"),
    8: .standard(proto: "region_source"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.regionNetwork) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.regionSim1) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.regionSim2) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.regionIp) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.regionSystem) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.regionProvided) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.isRoaming) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.regionSource) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.regionNetwork.isEmpty {
      try visitor.visitSingularStringField(value: self.regionNetwork, fieldNumber: 1)
    }
    if !self.regionSim1.isEmpty {
      try visitor.visitSingularStringField(value: self.regionSim1, fieldNumber: 2)
    }
    if !self.regionSim2.isEmpty {
      try visitor.visitSingularStringField(value: self.regionSim2, fieldNumber: 3)
    }
    if !self.regionIp.isEmpty {
      try visitor.visitSingularStringField(value: self.regionIp, fieldNumber: 4)
    }
    if !self.regionSystem.isEmpty {
      try visitor.visitSingularStringField(value: self.regionSystem, fieldNumber: 5)
    }
    if !self.regionProvided.isEmpty {
      try visitor.visitSingularStringField(value: self.regionProvided, fieldNumber: 6)
    }
    if self.isRoaming != false {
      try visitor.visitSingularBoolField(value: self.isRoaming, fieldNumber: 7)
    }
    if self.regionSource != .simNetwork {
      try visitor.visitSingularEnumField(value: self.regionSource, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Metric_Events_SubGhzProvisioning, rhs: Metric_Events_SubGhzProvisioning) -> Bool {
    if lhs.regionNetwork != rhs.regionNetwork {return false}
    if lhs.regionSim1 != rhs.regionSim1 {return false}
    if lhs.regionSim2 != rhs.regionSim2 {return false}
    if lhs.regionIp != rhs.regionIp {return false}
    if lhs.regionSystem != rhs.regionSystem {return false}
    if lhs.regionProvided != rhs.regionProvided {return false}
    if lhs.isRoaming != rhs.isRoaming {return false}
    if lhs.regionSource != rhs.regionSource {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metric_Events_SubGhzProvisioning.RegionSource: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SIM_NETWORK"),
    1: .same(proto: "SIM_COUNTRY"),
    2: .same(proto: "GEO_IP"),
    3: .same(proto: "SYSTEM"),
    4: .same(proto: "DEFAULT"),
  ]
}
