// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: events/open.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Metric_Events_Open {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var target: Metric_Events_Open.OpenTarget = .app

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OpenTarget: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case app // = 0
    case saveKey // = 1
    case emulate // = 2
    case edit // = 3
    case share // = 4
    case experimentalFm // = 5
    case experimentalScreenstreaming // = 6
    case shareShortlink // = 7
    case shareLonglink // = 8
    case shareFile // = 9
    case saveDump // = 10
    case mfkey32 // = 11
    case openNfcDumpEditor // = 12
    case UNRECOGNIZED(Int)

    init() {
      self = .app
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .app
      case 1: self = .saveKey
      case 2: self = .emulate
      case 3: self = .edit
      case 4: self = .share
      case 5: self = .experimentalFm
      case 6: self = .experimentalScreenstreaming
      case 7: self = .shareShortlink
      case 8: self = .shareLonglink
      case 9: self = .shareFile
      case 10: self = .saveDump
      case 11: self = .mfkey32
      case 12: self = .openNfcDumpEditor
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .app: return 0
      case .saveKey: return 1
      case .emulate: return 2
      case .edit: return 3
      case .share: return 4
      case .experimentalFm: return 5
      case .experimentalScreenstreaming: return 6
      case .shareShortlink: return 7
      case .shareLonglink: return 8
      case .shareFile: return 9
      case .saveDump: return 10
      case .mfkey32: return 11
      case .openNfcDumpEditor: return 12
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Metric_Events_Open.OpenTarget: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Metric_Events_Open.OpenTarget] = [
    .app,
    .saveKey,
    .emulate,
    .edit,
    .share,
    .experimentalFm,
    .experimentalScreenstreaming,
    .shareShortlink,
    .shareLonglink,
    .shareFile,
    .saveDump,
    .mfkey32,
    .openNfcDumpEditor,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Metric_Events_Open: @unchecked Sendable {}
extension Metric_Events_Open.OpenTarget: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "metric.events"

extension Metric_Events_Open: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Open"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "target"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.target) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.target != .app {
      try visitor.visitSingularEnumField(value: self.target, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Metric_Events_Open, rhs: Metric_Events_Open) -> Bool {
    if lhs.target != rhs.target {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Metric_Events_Open.OpenTarget: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "APP"),
    1: .same(proto: "SAVE_KEY"),
    2: .same(proto: "EMULATE"),
    3: .same(proto: "EDIT"),
    4: .same(proto: "SHARE"),
    5: .same(proto: "EXPERIMENTAL_FM"),
    6: .same(proto: "EXPERIMENTAL_SCREENSTREAMING"),
    7: .same(proto: "SHARE_SHORTLINK"),
    8: .same(proto: "SHARE_LONGLINK"),
    9: .same(proto: "SHARE_FILE"),
    10: .same(proto: "SAVE_DUMP"),
    11: .same(proto: "MFKEY32"),
    12: .same(proto: "OPEN_NFC_DUMP_EDITOR"),
  ]
}
