// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: events/flipper_rpc_info.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Metric_Events_FlipperRpcInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sdcardIsAvailable: Bool = false

  var internalFreeByte: Int64 = 0

  var internalTotalByte: Int64 = 0

  var externalFreeByte: Int64 = 0

  var externalTotalByte: Int64 = 0

  var firmwareForkName: String = String()

  var firmwareGitURL: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Metric_Events_FlipperRpcInfo: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "metric.events"

extension Metric_Events_FlipperRpcInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FlipperRpcInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sdcard_is_available"),
    2: .standard(proto: "internal_free_byte"),
    3: .standard(proto: "internal_total_byte"),
    4: .standard(proto: "external_free_byte"),
    5: .standard(proto: "external_total_byte"),
    6: .standard(proto: "firmware_fork_name"),
    7: .standard(proto: "firmware_git_url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.sdcardIsAvailable) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.internalFreeByte) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.internalTotalByte) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.externalFreeByte) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.externalTotalByte) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.firmwareForkName) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.firmwareGitURL) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sdcardIsAvailable != false {
      try visitor.visitSingularBoolField(value: self.sdcardIsAvailable, fieldNumber: 1)
    }
    if self.internalFreeByte != 0 {
      try visitor.visitSingularInt64Field(value: self.internalFreeByte, fieldNumber: 2)
    }
    if self.internalTotalByte != 0 {
      try visitor.visitSingularInt64Field(value: self.internalTotalByte, fieldNumber: 3)
    }
    if self.externalFreeByte != 0 {
      try visitor.visitSingularInt64Field(value: self.externalFreeByte, fieldNumber: 4)
    }
    if self.externalTotalByte != 0 {
      try visitor.visitSingularInt64Field(value: self.externalTotalByte, fieldNumber: 5)
    }
    if !self.firmwareForkName.isEmpty {
      try visitor.visitSingularStringField(value: self.firmwareForkName, fieldNumber: 6)
    }
    if !self.firmwareGitURL.isEmpty {
      try visitor.visitSingularStringField(value: self.firmwareGitURL, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Metric_Events_FlipperRpcInfo, rhs: Metric_Events_FlipperRpcInfo) -> Bool {
    if lhs.sdcardIsAvailable != rhs.sdcardIsAvailable {return false}
    if lhs.internalFreeByte != rhs.internalFreeByte {return false}
    if lhs.internalTotalByte != rhs.internalTotalByte {return false}
    if lhs.externalFreeByte != rhs.externalFreeByte {return false}
    if lhs.externalTotalByte != rhs.externalTotalByte {return false}
    if lhs.firmwareForkName != rhs.firmwareForkName {return false}
    if lhs.firmwareGitURL != rhs.firmwareGitURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
